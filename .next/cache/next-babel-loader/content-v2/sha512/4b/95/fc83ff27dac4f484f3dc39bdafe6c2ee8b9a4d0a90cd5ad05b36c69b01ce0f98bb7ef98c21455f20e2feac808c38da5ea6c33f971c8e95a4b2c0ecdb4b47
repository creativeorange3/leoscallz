{"ast":null,"code":"import { request, gql } from 'graphql-request';\nconst graphqlApi = process.env.NEXT_PUBLIC_GRAPHCMS_ENDPOINT;\nexport const getToken = async () => {\n  const query = gql`\n    query TokenQuery {\n        tokensConnection {\n          edges {\n            node {\n              id\n              buyTax\n              buyTokenomics\n              contract\n              decimals\n              description\n              design {\n                backgroundColor\n                ctaColor\n                fontColor\n              }\n              discord\n              extraLinks\n              slug\n              instagram\n              name\n              reddit\n              sellTax\n              sellTokenomics\n              telegram\n              ticker\n              totalSupply\n              twitter\n              youtube\n              tokenImage {\n                url\n              }\n            }\n          }\n        }\n      }\n         \n    `;\n  const results = await request(graphqlApi, query);\n  return results.tokensConnection.edges;\n};\nexport const getTokenInfo = async slug => {\n  const query = gql`\n    query GetTokenInfo($slug: String!) {\n        token(where: {slug: $slug}) {\n              id\n              buyTax\n              buyTokenomics\n              contract\n              decimals\n              description\n              design {\n                backgroundColor\n                ctaColor\n                fontColor\n              }\n              discord\n              extraLinks\n              instagram\n              name\n              reddit\n              sellTax\n              sellTokenomics\n              slug\n              telegram\n              ticker\n              totalSupply\n              twitter\n              youtube\n              tokenImage {\n                url\n              }\n        }\n      }\n         \n    `;\n  const results = await request(graphqlApi, query, {\n    slug\n  }); // results.token.extraLinks = results.token.extraLinks[0].links\n\n  console.log(results.token.extraLinks);\n  return results.token;\n};","map":{"version":3,"sources":["C:/Users/david/OneDrive/Desktop/neftify/services/index.js"],"names":["request","gql","graphqlApi","process","env","NEXT_PUBLIC_GRAPHCMS_ENDPOINT","getToken","query","results","tokensConnection","edges","getTokenInfo","slug","console","log","token","extraLinks"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AAEA,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,6BAA/B;AAEA,OAAO,MAAMC,QAAQ,GAAG,YAAY;AAChC,QAAMC,KAAK,GAAGN,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KArCI;AAuCA,QAAMO,OAAO,GAAG,MAAMR,OAAO,CAACE,UAAD,EAAaK,KAAb,CAA7B;AACA,SAAOC,OAAO,CAACC,gBAAR,CAAyBC,KAAhC;AACH,CA1CM;AA6CP,OAAO,MAAMC,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACxC,QAAML,KAAK,GAAGN,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAjCI;AAmCA,QAAMO,OAAO,GAAG,MAAMR,OAAO,CAACE,UAAD,EAAaK,KAAb,EAAoB;AAAEK,IAAAA;AAAF,GAApB,CAA7B,CApCwC,CAsCxC;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAO,CAACO,KAAR,CAAcC,UAA1B;AACA,SAAOR,OAAO,CAACO,KAAf;AACH,CAzCM","sourcesContent":["import { request, gql } from 'graphql-request';\r\n\r\nconst graphqlApi = process.env.NEXT_PUBLIC_GRAPHCMS_ENDPOINT;\r\n\r\nexport const getToken = async () => {\r\n    const query = gql`\r\n    query TokenQuery {\r\n        tokensConnection {\r\n          edges {\r\n            node {\r\n              id\r\n              buyTax\r\n              buyTokenomics\r\n              contract\r\n              decimals\r\n              description\r\n              design {\r\n                backgroundColor\r\n                ctaColor\r\n                fontColor\r\n              }\r\n              discord\r\n              extraLinks\r\n              slug\r\n              instagram\r\n              name\r\n              reddit\r\n              sellTax\r\n              sellTokenomics\r\n              telegram\r\n              ticker\r\n              totalSupply\r\n              twitter\r\n              youtube\r\n              tokenImage {\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n         \r\n    `;\r\n\r\n    const results = await request(graphqlApi, query);\r\n    return results.tokensConnection.edges;\r\n}\r\n\r\n\r\nexport const getTokenInfo = async (slug) => {\r\n    const query = gql`\r\n    query GetTokenInfo($slug: String!) {\r\n        token(where: {slug: $slug}) {\r\n              id\r\n              buyTax\r\n              buyTokenomics\r\n              contract\r\n              decimals\r\n              description\r\n              design {\r\n                backgroundColor\r\n                ctaColor\r\n                fontColor\r\n              }\r\n              discord\r\n              extraLinks\r\n              instagram\r\n              name\r\n              reddit\r\n              sellTax\r\n              sellTokenomics\r\n              slug\r\n              telegram\r\n              ticker\r\n              totalSupply\r\n              twitter\r\n              youtube\r\n              tokenImage {\r\n                url\r\n              }\r\n        }\r\n      }\r\n         \r\n    `;\r\n\r\n    const results = await request(graphqlApi, query, { slug });\r\n    \r\n    // results.token.extraLinks = results.token.extraLinks[0].links\r\n    console.log(results.token.extraLinks)\r\n    return results.token;\r\n}"]},"metadata":{},"sourceType":"module"}